import {
  Base,
  Carousel,
  Panzoom,
  extend,
  isPlainObject,
  isScrollable
} from "./chunk-6OL4MRPY.js";
import "./chunk-FE6Y45BL.js";

// node_modules/@fancyapps/ui/src/shared/utils/canUseDOM.js
var canUseDOM = !!(typeof window !== "undefined" && window.document && window.document.createElement);

// node_modules/@fancyapps/ui/src/shared/utils/setFocusOn.js
var preventScrollSupported = null;
var FOCUSABLE_ELEMENTS = [
  "a[href]",
  "area[href]",
  'input:not([disabled]):not([type="hidden"]):not([aria-hidden])',
  "select:not([disabled]):not([aria-hidden])",
  "textarea:not([disabled]):not([aria-hidden])",
  "button:not([disabled]):not([aria-hidden])",
  "iframe",
  "object",
  "embed",
  "video",
  "audio",
  "[contenteditable]",
  '[tabindex]:not([tabindex^="-"]):not([disabled]):not([aria-hidden])'
];
var setFocusOn = (node) => {
  if (!node || !canUseDOM) {
    return;
  }
  if (preventScrollSupported === null) {
    document.createElement("div").focus({
      get preventScroll() {
        preventScrollSupported = true;
        return false;
      }
    });
  }
  try {
    if (node.setActive) {
      node.setActive();
    } else if (preventScrollSupported) {
      node.focus({ preventScroll: true });
    } else {
      const scrollTop = window.pageXOffset || document.body.scrollTop;
      const scrollLeft = window.pageYOffset || document.body.scrollLeft;
      node.focus();
      document.body.scrollTo({
        top: scrollTop,
        left: scrollLeft,
        behavior: "auto"
      });
    }
  } catch (e) {
  }
};

// node_modules/@fancyapps/ui/src/Fancybox/plugins/ScrollLock/ScrollLock.js
var ScrollLock = class {
  constructor(fancybox) {
    this.fancybox = fancybox;
    this.viewport = null;
    this.pendingUpdate = null;
    for (const methodName of ["onReady", "onResize", "onTouchstart", "onTouchmove"]) {
      this[methodName] = this[methodName].bind(this);
    }
  }
  onReady() {
    const viewport = window.visualViewport;
    if (viewport) {
      this.viewport = viewport;
      this.startY = 0;
      viewport.addEventListener("resize", this.onResize);
      this.updateViewport();
    }
    window.addEventListener("touchstart", this.onTouchstart, { passive: false });
    window.addEventListener("touchmove", this.onTouchmove, { passive: false });
    window.addEventListener("wheel", this.onWheel, { passive: false });
  }
  onResize() {
    this.updateViewport();
  }
  updateViewport() {
    const fancybox = this.fancybox, viewport = this.viewport, scale = viewport.scale || 1, $container = fancybox.$container;
    if (!$container) {
      return;
    }
    let width = "", height = "", transform = "";
    if (scale - 1 > 0.1) {
      width = `${viewport.width * scale}px`;
      height = `${viewport.height * scale}px`;
      transform = `translate3d(${viewport.offsetLeft}px, ${viewport.offsetTop}px, 0) scale(${1 / scale})`;
    }
    $container.style.width = width;
    $container.style.height = height;
    $container.style.transform = transform;
  }
  onTouchstart(event) {
    this.startY = event.touches ? event.touches[0].screenY : event.screenY;
  }
  onTouchmove(event) {
    const startY = this.startY;
    const zoom = window.innerWidth / window.document.documentElement.clientWidth;
    if (!event.cancelable) {
      return;
    }
    if (event.touches.length > 1 || zoom !== 1) {
      return;
    }
    const el = isScrollable(event.composedPath()[0]);
    if (!el) {
      event.preventDefault();
      return;
    }
    const style = window.getComputedStyle(el);
    const height = parseInt(style.getPropertyValue("height"), 10);
    const curY = event.touches ? event.touches[0].screenY : event.screenY;
    const isAtTop = startY <= curY && el.scrollTop === 0;
    const isAtBottom = startY >= curY && el.scrollHeight - el.scrollTop === height;
    if (isAtTop || isAtBottom) {
      event.preventDefault();
    }
  }
  onWheel(event) {
    if (!isScrollable(event.composedPath()[0])) {
      event.preventDefault();
    }
  }
  cleanup() {
    if (this.pendingUpdate) {
      cancelAnimationFrame(this.pendingUpdate);
      this.pendingUpdate = null;
    }
    const viewport = this.viewport;
    if (viewport) {
      viewport.removeEventListener("resize", this.onResize);
      this.viewport = null;
    }
    window.removeEventListener("touchstart", this.onTouchstart, false);
    window.removeEventListener("touchmove", this.onTouchmove, false);
    window.removeEventListener("wheel", this.onWheel, { passive: false });
  }
  attach() {
    this.fancybox.on("initLayout", this.onReady);
  }
  detach() {
    this.fancybox.off("initLayout", this.onReady);
    this.cleanup();
  }
};

// node_modules/@fancyapps/ui/src/Fancybox/plugins/Thumbs/Thumbs.js
var defaults = {
  minSlideCount: 2,
  minScreenHeight: 500,
  autoStart: true,
  key: "t",
  Carousel: {},
  tpl: `<div class="fancybox__thumb" style="background-image:url('{{src}}')"></div>`
};
var Thumbs = class {
  constructor(fancybox) {
    this.fancybox = fancybox;
    this.$container = null;
    this.state = "init";
    for (const methodName of ["onPrepare", "onClosing", "onKeydown"]) {
      this[methodName] = this[methodName].bind(this);
    }
    this.events = {
      prepare: this.onPrepare,
      closing: this.onClosing,
      keydown: this.onKeydown
    };
  }
  onPrepare() {
    const slides = this.getSlides();
    if (slides.length < this.fancybox.option("Thumbs.minSlideCount")) {
      this.state = "disabled";
      return;
    }
    if (this.fancybox.option("Thumbs.autoStart") === true && this.fancybox.Carousel.Panzoom.content.height >= this.fancybox.option("Thumbs.minScreenHeight")) {
      this.build();
    }
  }
  onClosing() {
    if (this.Carousel) {
      this.Carousel.Panzoom.detachEvents();
    }
  }
  onKeydown(fancybox, key) {
    if (key === fancybox.option("Thumbs.key")) {
      this.toggle();
    }
  }
  build() {
    if (this.$container) {
      return;
    }
    const $container = document.createElement("div");
    $container.classList.add("fancybox__thumbs");
    this.fancybox.$carousel.parentNode.insertBefore($container, this.fancybox.$carousel.nextSibling);
    this.Carousel = new Carousel(
      $container,
      extend(
        true,
        {
          Dots: false,
          Navigation: false,
          Sync: {
            friction: 0
          },
          infinite: false,
          center: true,
          fill: true,
          dragFree: true,
          slidesPerPage: 1,
          preload: 1
        },
        this.fancybox.option("Thumbs.Carousel"),
        {
          Sync: {
            target: this.fancybox.Carousel
          },
          slides: this.getSlides()
        }
      )
    );
    this.Carousel.Panzoom.on("wheel", (panzoom, event) => {
      event.preventDefault();
      this.fancybox[event.deltaY < 0 ? "prev" : "next"]();
    });
    this.$container = $container;
    this.state = "visible";
  }
  getSlides() {
    const slides = [];
    for (const slide of this.fancybox.items) {
      const thumb = slide.thumb;
      if (thumb) {
        slides.push({
          html: this.fancybox.option("Thumbs.tpl").replace(/\{\{src\}\}/gi, thumb),
          customClass: `has-thumb has-${slide.type || "image"}`
        });
      }
    }
    return slides;
  }
  toggle() {
    if (this.state === "visible") {
      this.hide();
    } else if (this.state === "hidden") {
      this.show();
    } else {
      this.build();
    }
  }
  show() {
    if (this.state === "hidden") {
      this.$container.style.display = "";
      this.Carousel.Panzoom.attachEvents();
      this.state = "visible";
    }
  }
  hide() {
    if (this.state === "visible") {
      this.Carousel.Panzoom.detachEvents();
      this.$container.style.display = "none";
      this.state = "hidden";
    }
  }
  cleanup() {
    if (this.Carousel) {
      this.Carousel.destroy();
      this.Carousel = null;
    }
    if (this.$container) {
      this.$container.remove();
      this.$container = null;
    }
    this.state = "init";
  }
  attach() {
    this.fancybox.on(this.events);
  }
  detach() {
    this.fancybox.off(this.events);
    this.cleanup();
  }
};
Thumbs.defaults = defaults;

// node_modules/@fancyapps/ui/src/Fancybox/plugins/Html/Html.js
var buildURLQuery = (src, obj) => {
  const url = new URL(src);
  const params = new URLSearchParams(url.search);
  let rez = new URLSearchParams();
  for (const [key, value] of [...params, ...Object.entries(obj)]) {
    if (key === "t") {
      rez.set("start", parseInt(value));
    } else {
      rez.set(key, value);
    }
  }
  rez = rez.toString();
  let matches = src.match(/#t=((.*)?\d+s)/);
  if (matches) {
    rez += `#t=${matches[1]}`;
  }
  return rez;
};
var defaults2 = {
  video: {
    autoplay: true,
    ratio: 16 / 9
  },
  youtube: {
    autohide: 1,
    fs: 1,
    rel: 0,
    hd: 1,
    wmode: "transparent",
    enablejsapi: 1,
    html5: 1
  },
  vimeo: {
    hd: 1,
    show_title: 1,
    show_byline: 1,
    show_portrait: 0,
    fullscreen: 1
  },
  html5video: {
    tpl: `<video class="fancybox__html5video" playsinline controls controlsList="nodownload" poster="{{poster}}">
  <source src="{{src}}" type="{{format}}" />Sorry, your browser doesn't support embedded videos.</video>`,
    format: ""
  }
};
var Html = class {
  constructor(fancybox) {
    this.fancybox = fancybox;
    for (const methodName of [
      "onInit",
      "onReady",
      "onCreateSlide",
      "onRemoveSlide",
      "onSelectSlide",
      "onUnselectSlide",
      "onRefresh",
      "onMessage"
    ]) {
      this[methodName] = this[methodName].bind(this);
    }
    this.events = {
      init: this.onInit,
      ready: this.onReady,
      "Carousel.createSlide": this.onCreateSlide,
      "Carousel.removeSlide": this.onRemoveSlide,
      "Carousel.selectSlide": this.onSelectSlide,
      "Carousel.unselectSlide": this.onUnselectSlide,
      "Carousel.refresh": this.onRefresh
    };
  }
  onInit() {
    for (const slide of this.fancybox.items) {
      this.processType(slide);
    }
  }
  processType(slide) {
    if (slide.html) {
      slide.src = slide.html;
      slide.type = "html";
      delete slide.html;
      return;
    }
    const src = slide.src || "";
    let type = slide.type || this.fancybox.options.type, rez = null;
    if (src && typeof src !== "string") {
      return;
    }
    if (rez = src.match(
      /(?:youtube\.com|youtu\.be|youtube\-nocookie\.com)\/(?:watch\?(?:.*&)?v=|v\/|u\/|embed\/?)?(videoseries\?list=(?:.*)|[\w-]{11}|\?listType=(?:.*)&list=(?:.*))(?:.*)/i
    )) {
      const params = buildURLQuery(src, this.fancybox.option("Html.youtube"));
      const videoId = encodeURIComponent(rez[1]);
      slide.videoId = videoId;
      slide.src = `https://www.youtube-nocookie.com/embed/${videoId}?${params}`;
      slide.thumb = slide.thumb || `https://i.ytimg.com/vi/${videoId}/mqdefault.jpg`;
      slide.vendor = "youtube";
      type = "video";
    } else if (rez = src.match(/^.+vimeo.com\/(?:\/)?([\d]+)(.*)?/)) {
      const params = buildURLQuery(src, this.fancybox.option("Html.vimeo"));
      const videoId = encodeURIComponent(rez[1]);
      slide.videoId = videoId;
      slide.src = `https://player.vimeo.com/video/${videoId}?${params}`;
      slide.vendor = "vimeo";
      type = "video";
    } else if (rez = src.match(
      /(?:maps\.)?google\.([a-z]{2,3}(?:\.[a-z]{2})?)\/(?:(?:(?:maps\/(?:place\/(?:.*)\/)?\@(.*),(\d+.?\d+?)z))|(?:\?ll=))(.*)?/i
    )) {
      slide.src = `//maps.google.${rez[1]}/?ll=${(rez[2] ? rez[2] + "&z=" + Math.floor(rez[3]) + (rez[4] ? rez[4].replace(/^\//, "&") : "") : rez[4] + "").replace(/\?/, "&")}&output=${rez[4] && rez[4].indexOf("layer=c") > 0 ? "svembed" : "embed"}`;
      type = "map";
    } else if (rez = src.match(/(?:maps\.)?google\.([a-z]{2,3}(?:\.[a-z]{2})?)\/(?:maps\/search\/)(.*)/i)) {
      slide.src = `//maps.google.${rez[1]}/maps?q=${rez[2].replace("query=", "q=").replace("api=1", "")}&output=embed`;
      type = "map";
    }
    if (!type) {
      if (src.charAt(0) === "#") {
        type = "inline";
      } else if (rez = src.match(/\.(mp4|mov|ogv|webm)((\?|#).*)?$/i)) {
        type = "html5video";
        slide.format = slide.format || "video/" + (rez[1] === "ogv" ? "ogg" : rez[1]);
      } else if (src.match(/(^data:image\/[a-z0-9+\/=]*,)|(\.(jp(e|g|eg)|gif|png|bmp|webp|svg|ico)((\?|#).*)?$)/i)) {
        type = "image";
      } else if (src.match(/\.(pdf)((\?|#).*)?$/i)) {
        type = "pdf";
      }
    }
    slide.type = type || this.fancybox.option("defaultType", "image");
    if (type === "html5video" || type === "video") {
      slide.video = extend({}, this.fancybox.option("Html.video"), slide.video);
      if (slide._width && slide._height) {
        slide.ratio = parseFloat(slide._width) / parseFloat(slide._height);
      } else {
        slide.ratio = slide.ratio || slide.video.ratio || defaults2.video.ratio;
      }
    }
  }
  onReady() {
    this.fancybox.Carousel.slides.forEach((slide) => {
      if (slide.$el) {
        this.setContent(slide);
        if (slide.index === this.fancybox.getSlide().index) {
          this.playVideo(slide);
        }
      }
    });
  }
  onCreateSlide(fancybox, carousel, slide) {
    if (this.fancybox.state !== "ready") {
      return;
    }
    this.setContent(slide);
  }
  loadInlineContent(slide) {
    let $content;
    if (slide.src instanceof HTMLElement) {
      $content = slide.src;
    } else if (typeof slide.src === "string") {
      const tmp = slide.src.split("#", 2);
      const id = tmp.length === 2 && tmp[0] === "" ? tmp[1] : tmp[0];
      $content = document.getElementById(id);
    }
    if ($content) {
      if (slide.type === "clone" || $content.$placeHolder) {
        $content = $content.cloneNode(true);
        let attrId = $content.getAttribute("id");
        attrId = attrId ? `${attrId}--clone` : `clone-${this.fancybox.id}-${slide.index}`;
        $content.setAttribute("id", attrId);
      } else {
        const $placeHolder = document.createElement("div");
        $placeHolder.classList.add("fancybox-placeholder");
        $content.parentNode.insertBefore($placeHolder, $content);
        $content.$placeHolder = $placeHolder;
      }
      this.fancybox.setContent(slide, $content);
    } else {
      this.fancybox.setError(slide, "{{ELEMENT_NOT_FOUND}}");
    }
  }
  loadAjaxContent(slide) {
    const fancybox = this.fancybox;
    const xhr = new XMLHttpRequest();
    fancybox.showLoading(slide);
    xhr.onreadystatechange = function() {
      if (xhr.readyState === XMLHttpRequest.DONE) {
        if (fancybox.state === "ready") {
          fancybox.hideLoading(slide);
          if (xhr.status === 200) {
            fancybox.setContent(slide, xhr.responseText);
          } else {
            fancybox.setError(slide, xhr.status === 404 ? "{{AJAX_NOT_FOUND}}" : "{{AJAX_FORBIDDEN}}");
          }
        }
      }
    };
    const data = slide.ajax || null;
    xhr.open(data ? "POST" : "GET", slide.src);
    xhr.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
    xhr.setRequestHeader("X-Requested-With", "XMLHttpRequest");
    xhr.send(data);
    slide.xhr = xhr;
  }
  loadIframeContent(slide) {
    const fancybox = this.fancybox;
    const $iframe = document.createElement("iframe");
    $iframe.className = "fancybox__iframe";
    $iframe.setAttribute("id", `fancybox__iframe_${fancybox.id}_${slide.index}`);
    $iframe.setAttribute("allow", "autoplay; fullscreen");
    $iframe.setAttribute("scrolling", "auto");
    slide.$iframe = $iframe;
    if (slide.type !== "iframe" || slide.preload === false) {
      $iframe.setAttribute("src", slide.src);
      this.fancybox.setContent(slide, $iframe);
      this.resizeIframe(slide);
      return;
    }
    fancybox.showLoading(slide);
    const $content = document.createElement("div");
    $content.style.visibility = "hidden";
    this.fancybox.setContent(slide, $content);
    $content.appendChild($iframe);
    $iframe.onerror = () => {
      fancybox.setError(slide, "{{IFRAME_ERROR}}");
    };
    $iframe.onload = () => {
      fancybox.hideLoading(slide);
      let isFirstLoad = false;
      if (!$iframe.isReady) {
        $iframe.isReady = true;
        isFirstLoad = true;
      }
      if (!$iframe.src.length) {
        return;
      }
      $iframe.parentNode.style.visibility = "";
      this.resizeIframe(slide);
      if (isFirstLoad) {
        fancybox.revealContent(slide);
      }
    };
    $iframe.setAttribute("src", slide.src);
  }
  setAspectRatio(slide) {
    const $content = slide.$content;
    const ratio = slide.ratio;
    if (!$content) {
      return;
    }
    let width = slide._width;
    let height = slide._height;
    if (ratio || width && height) {
      Object.assign($content.style, {
        width: width && height ? "100%" : "",
        height: width && height ? "100%" : "",
        maxWidth: "",
        maxHeight: ""
      });
      let maxWidth = $content.offsetWidth;
      let maxHeight = $content.offsetHeight;
      width = width || maxWidth;
      height = height || maxHeight;
      if (width > maxWidth || height > maxHeight) {
        let maxRatio = Math.min(maxWidth / width, maxHeight / height);
        width = width * maxRatio;
        height = height * maxRatio;
      }
      if (Math.abs(width / height - ratio) > 0.01) {
        if (ratio < width / height) {
          width = height * ratio;
        } else {
          height = width / ratio;
        }
      }
      Object.assign($content.style, {
        width: `${width}px`,
        height: `${height}px`
      });
    }
  }
  resizeIframe(slide) {
    const $iframe = slide.$iframe;
    if (!$iframe) {
      return;
    }
    let width_ = slide._width || 0;
    let height_ = slide._height || 0;
    if (width_ && height_) {
      slide.autoSize = false;
    }
    const $parent = $iframe.parentNode;
    const parentStyle = $parent && $parent.style;
    if (slide.preload !== false && slide.autoSize !== false && parentStyle) {
      try {
        const compStyles = window.getComputedStyle($parent), paddingX = parseFloat(compStyles.paddingLeft) + parseFloat(compStyles.paddingRight), paddingY = parseFloat(compStyles.paddingTop) + parseFloat(compStyles.paddingBottom);
        const document2 = $iframe.contentWindow.document, $html = document2.getElementsByTagName("html")[0], $body = document2.body;
        parentStyle.width = "";
        $body.style.overflow = "hidden";
        width_ = width_ || $html.scrollWidth + paddingX;
        parentStyle.width = `${width_}px`;
        $body.style.overflow = "";
        parentStyle.flex = "0 0 auto";
        parentStyle.height = `${$body.scrollHeight}px`;
        height_ = $html.scrollHeight + paddingY;
      } catch (error) {
      }
    }
    if (width_ || height_) {
      const newStyle = {
        flex: "0 1 auto"
      };
      if (width_) {
        newStyle.width = `${width_}px`;
      }
      if (height_) {
        newStyle.height = `${height_}px`;
      }
      Object.assign(parentStyle, newStyle);
    }
  }
  onRefresh(fancybox, carousel) {
    carousel.slides.forEach((slide) => {
      if (!slide.$el) {
        return;
      }
      if (slide.$iframe) {
        this.resizeIframe(slide);
      }
      if (slide.ratio) {
        this.setAspectRatio(slide);
      }
    });
  }
  setContent(slide) {
    if (!slide || slide.isDom) {
      return;
    }
    switch (slide.type) {
      case "html":
        this.fancybox.setContent(slide, slide.src);
        break;
      case "html5video":
        this.fancybox.setContent(
          slide,
          this.fancybox.option("Html.html5video.tpl").replace(/\{\{src\}\}/gi, slide.src).replace("{{format}}", slide.format || slide.html5video && slide.html5video.format || "").replace("{{poster}}", slide.poster || slide.thumb || "")
        );
        break;
      case "inline":
      case "clone":
        this.loadInlineContent(slide);
        break;
      case "ajax":
        this.loadAjaxContent(slide);
        break;
      case "pdf":
      case "video":
      case "map":
        slide.preload = false;
      case "iframe":
        this.loadIframeContent(slide);
        break;
    }
    if (slide.ratio) {
      this.setAspectRatio(slide);
    }
  }
  onSelectSlide(fancybox, carousel, slide) {
    if (fancybox.state === "ready") {
      this.playVideo(slide);
    }
  }
  playVideo(slide) {
    if (slide.type === "html5video" && slide.video.autoplay) {
      try {
        const $video = slide.$el.querySelector("video");
        if ($video) {
          const promise = $video.play();
          if (promise !== void 0) {
            promise.then(() => {
            }).catch((error) => {
              $video.muted = true;
              $video.play();
            });
          }
        }
      } catch (err) {
      }
    }
    if (slide.type !== "video" || !(slide.$iframe && slide.$iframe.contentWindow)) {
      return;
    }
    const poller = () => {
      if (slide.state === "done" && slide.$iframe && slide.$iframe.contentWindow) {
        let command;
        if (slide.$iframe.isReady) {
          if (slide.video && slide.video.autoplay) {
            if (slide.vendor == "youtube") {
              command = {
                event: "command",
                func: "playVideo"
              };
            } else {
              command = {
                method: "play",
                value: "true"
              };
            }
          }
          if (command) {
            slide.$iframe.contentWindow.postMessage(JSON.stringify(command), "*");
          }
          return;
        }
        if (slide.vendor === "youtube") {
          command = {
            event: "listening",
            id: slide.$iframe.getAttribute("id")
          };
          slide.$iframe.contentWindow.postMessage(JSON.stringify(command), "*");
        }
      }
      slide.poller = setTimeout(poller, 250);
    };
    poller();
  }
  onUnselectSlide(fancybox, carousel, slide) {
    if (slide.type === "html5video") {
      try {
        slide.$el.querySelector("video").pause();
      } catch (error) {
      }
      return;
    }
    let command = false;
    if (slide.vendor == "vimeo") {
      command = {
        method: "pause",
        value: "true"
      };
    } else if (slide.vendor === "youtube") {
      command = {
        event: "command",
        func: "pauseVideo"
      };
    }
    if (command && slide.$iframe && slide.$iframe.contentWindow) {
      slide.$iframe.contentWindow.postMessage(JSON.stringify(command), "*");
    }
    clearTimeout(slide.poller);
  }
  onRemoveSlide(fancybox, carousel, slide) {
    if (slide.xhr) {
      slide.xhr.abort();
      slide.xhr = null;
    }
    if (slide.$iframe) {
      slide.$iframe.onload = slide.$iframe.onerror = null;
      slide.$iframe.src = "//about:blank";
      slide.$iframe = null;
    }
    const $content = slide.$content;
    if (slide.type === "inline" && $content) {
      $content.classList.remove("fancybox__content");
      if ($content.style.display !== "none") {
        $content.style.display = "none";
      }
    }
    if (slide.$closeButton) {
      slide.$closeButton.remove();
      slide.$closeButton = null;
    }
    const $placeHolder = $content && $content.$placeHolder;
    if ($placeHolder) {
      $placeHolder.parentNode.insertBefore($content, $placeHolder);
      $placeHolder.remove();
      $content.$placeHolder = null;
    }
  }
  onMessage(e) {
    try {
      let data = JSON.parse(e.data);
      if (e.origin === "https://player.vimeo.com") {
        if (data.event === "ready") {
          for (let $iframe of document.getElementsByClassName("fancybox__iframe")) {
            if ($iframe.contentWindow === e.source) {
              $iframe.isReady = 1;
            }
          }
        }
      } else if (e.origin === "https://www.youtube-nocookie.com") {
        if (data.event === "onReady") {
          document.getElementById(data.id).isReady = 1;
        }
      }
    } catch (ex) {
    }
  }
  attach() {
    this.fancybox.on(this.events);
    window.addEventListener("message", this.onMessage, false);
  }
  detach() {
    this.fancybox.off(this.events);
    window.removeEventListener("message", this.onMessage, false);
  }
};
Html.defaults = defaults2;

// node_modules/@fancyapps/ui/src/Fancybox/plugins/Image/Image.js
var defaults3 = {
  canZoomInClass: "can-zoom_in",
  canZoomOutClass: "can-zoom_out",
  zoom: true,
  zoomOpacity: "auto",
  zoomFriction: 0.82,
  ignoreCoveredThumbnail: false,
  touch: true,
  click: "toggleZoom",
  doubleClick: null,
  wheel: "zoom",
  fit: "contain",
  wrap: false,
  Panzoom: {
    ratio: 1
  }
};
var Image = class {
  constructor(fancybox) {
    this.fancybox = fancybox;
    for (const methodName of [
      "onReady",
      "onClosing",
      "onDone",
      "onPageChange",
      "onCreateSlide",
      "onRemoveSlide",
      "onImageStatusChange"
    ]) {
      this[methodName] = this[methodName].bind(this);
    }
    this.events = {
      ready: this.onReady,
      closing: this.onClosing,
      done: this.onDone,
      "Carousel.change": this.onPageChange,
      "Carousel.createSlide": this.onCreateSlide,
      "Carousel.removeSlide": this.onRemoveSlide
    };
  }
  onReady() {
    this.fancybox.Carousel.slides.forEach((slide) => {
      if (slide.$el) {
        this.setContent(slide);
      }
    });
  }
  onDone(fancybox, slide) {
    this.handleCursor(slide);
  }
  onClosing(fancybox) {
    clearTimeout(this.clickTimer);
    this.clickTimer = null;
    fancybox.Carousel.slides.forEach((slide) => {
      if (slide.$image) {
        slide.state = "destroy";
      }
      if (slide.Panzoom) {
        slide.Panzoom.detachEvents();
      }
    });
    if (this.fancybox.state === "closing" && this.canZoom(fancybox.getSlide())) {
      this.zoomOut();
    }
  }
  onCreateSlide(fancybox, carousel, slide) {
    if (this.fancybox.state !== "ready") {
      return;
    }
    this.setContent(slide);
  }
  onRemoveSlide(fancybox, carousel, slide) {
    if (slide.$image) {
      slide.$el.classList.remove(fancybox.option("Image.canZoomInClass"));
      slide.$image.remove();
      slide.$image = null;
    }
    if (slide.Panzoom) {
      slide.Panzoom.destroy();
      slide.Panzoom = null;
    }
    if (slide.$el && slide.$el.dataset) {
      delete slide.$el.dataset.imageFit;
    }
  }
  setContent(slide) {
    if (slide.isDom || slide.html || slide.type && slide.type !== "image") {
      return;
    }
    if (slide.$image) {
      return;
    }
    slide.type = "image";
    slide.state = "loading";
    const $content = document.createElement("div");
    $content.style.visibility = "hidden";
    const $image = document.createElement("img");
    $image.addEventListener("load", (event) => {
      event.stopImmediatePropagation();
      this.onImageStatusChange(slide);
    });
    $image.addEventListener("error", () => {
      this.onImageStatusChange(slide);
    });
    $image.src = slide.src;
    $image.alt = "";
    $image.draggable = false;
    $image.classList.add("fancybox__image");
    if (slide.srcset) {
      $image.setAttribute("srcset", slide.srcset);
    }
    if (slide.sizes) {
      $image.setAttribute("sizes", slide.sizes);
    }
    slide.$image = $image;
    const shouldWrap = this.fancybox.option("Image.wrap");
    if (shouldWrap) {
      const $wrap = document.createElement("div");
      $wrap.classList.add(typeof shouldWrap === "string" ? shouldWrap : "fancybox__image-wrap");
      $wrap.appendChild($image);
      $content.appendChild($wrap);
      slide.$wrap = $wrap;
    } else {
      $content.appendChild($image);
    }
    slide.$el.dataset.imageFit = this.fancybox.option("Image.fit");
    this.fancybox.setContent(slide, $content);
    if ($image.complete || $image.error) {
      this.onImageStatusChange(slide);
    } else {
      this.fancybox.showLoading(slide);
    }
  }
  onImageStatusChange(slide) {
    const $image = slide.$image;
    if (!$image || slide.state !== "loading") {
      return;
    }
    if (!($image.complete && $image.naturalWidth && $image.naturalHeight)) {
      this.fancybox.setError(slide, "{{IMAGE_ERROR}}");
      return;
    }
    this.fancybox.hideLoading(slide);
    if (this.fancybox.option("Image.fit") === "contain") {
      this.initSlidePanzoom(slide);
    }
    slide.$el.addEventListener("wheel", (event) => this.onWheel(slide, event), { passive: false });
    slide.$content.addEventListener("click", (event) => this.onClick(slide, event), { passive: false });
    this.revealContent(slide);
  }
  initSlidePanzoom(slide) {
    if (slide.Panzoom) {
      return;
    }
    slide.Panzoom = new Panzoom(
      slide.$el,
      extend(true, this.fancybox.option("Image.Panzoom", {}), {
        viewport: slide.$wrap,
        content: slide.$image,
        width: slide._width,
        height: slide._height,
        wrapInner: false,
        textSelection: true,
        touch: this.fancybox.option("Image.touch"),
        panOnlyZoomed: true,
        click: false,
        wheel: false
      })
    );
    slide.Panzoom.on("startAnimation", () => {
      this.fancybox.trigger("Image.startAnimation", slide);
    });
    slide.Panzoom.on("endAnimation", () => {
      if (slide.state === "zoomIn") {
        this.fancybox.done(slide);
      }
      this.handleCursor(slide);
      this.fancybox.trigger("Image.endAnimation", slide);
    });
    slide.Panzoom.on("afterUpdate", () => {
      this.handleCursor(slide);
      this.fancybox.trigger("Image.afterUpdate", slide);
    });
  }
  revealContent(slide) {
    if (this.fancybox.Carousel.prevPage === null && slide.index === this.fancybox.options.startIndex && this.canZoom(slide)) {
      this.zoomIn();
    } else {
      this.fancybox.revealContent(slide);
    }
  }
  getZoomInfo(slide) {
    const $thumb = slide.$thumb, thumbRect = $thumb.getBoundingClientRect(), thumbWidth = thumbRect.width, thumbHeight = thumbRect.height, contentRect = slide.$content.getBoundingClientRect(), contentWidth = contentRect.width, contentHeight = contentRect.height, shiftedTop = contentRect.top - thumbRect.top, shiftedLeft = contentRect.left - thumbRect.left;
    let opacity = this.fancybox.option("Image.zoomOpacity");
    if (opacity === "auto") {
      opacity = Math.abs(thumbWidth / thumbHeight - contentWidth / contentHeight) > 0.1;
    }
    return {
      top: shiftedTop,
      left: shiftedLeft,
      scale: contentWidth && thumbWidth ? thumbWidth / contentWidth : 1,
      opacity
    };
  }
  canZoom(slide) {
    const fancybox = this.fancybox, $container = fancybox.$container;
    if (window.visualViewport && window.visualViewport.scale !== 1) {
      return false;
    }
    if (slide.Panzoom && !slide.Panzoom.content.width) {
      return false;
    }
    if (!fancybox.option("Image.zoom") || fancybox.option("Image.fit") !== "contain") {
      return false;
    }
    const $thumb = slide.$thumb;
    if (!$thumb || slide.state === "loading") {
      return false;
    }
    $container.classList.add("fancybox__no-click");
    const rect = $thumb.getBoundingClientRect();
    let rez;
    if (this.fancybox.option("Image.ignoreCoveredThumbnail")) {
      const visibleTopLeft = document.elementFromPoint(rect.left + 1, rect.top + 1) === $thumb;
      const visibleBottomRight = document.elementFromPoint(rect.right - 1, rect.bottom - 1) === $thumb;
      rez = visibleTopLeft && visibleBottomRight;
    } else {
      rez = document.elementFromPoint(rect.left + rect.width * 0.5, rect.top + rect.height * 0.5) === $thumb;
    }
    $container.classList.remove("fancybox__no-click");
    return rez;
  }
  zoomIn() {
    const fancybox = this.fancybox, slide = fancybox.getSlide(), Panzoom2 = slide.Panzoom;
    const { top, left, scale, opacity } = this.getZoomInfo(slide);
    fancybox.trigger("reveal", slide);
    Panzoom2.panTo({
      x: left * -1,
      y: top * -1,
      scale,
      friction: 0,
      ignoreBounds: true
    });
    slide.$content.style.visibility = "";
    slide.state = "zoomIn";
    if (opacity === true) {
      Panzoom2.on("afterTransform", (panzoom) => {
        if (slide.state === "zoomIn" || slide.state === "zoomOut") {
          panzoom.$content.style.opacity = Math.min(1, 1 - (1 - panzoom.content.scale) / (1 - scale));
        }
      });
    }
    Panzoom2.panTo({
      x: 0,
      y: 0,
      scale: 1,
      friction: this.fancybox.option("Image.zoomFriction")
    });
  }
  zoomOut() {
    const fancybox = this.fancybox, slide = fancybox.getSlide(), Panzoom2 = slide.Panzoom;
    if (!Panzoom2) {
      return;
    }
    slide.state = "zoomOut";
    fancybox.state = "customClosing";
    if (slide.$caption) {
      slide.$caption.style.visibility = "hidden";
    }
    let friction = this.fancybox.option("Image.zoomFriction");
    const animatePosition = (event) => {
      const { top, left, scale, opacity } = this.getZoomInfo(slide);
      if (!event && !opacity) {
        friction *= 0.82;
      }
      Panzoom2.panTo({
        x: left * -1,
        y: top * -1,
        scale,
        friction,
        ignoreBounds: true
      });
      friction *= 0.98;
    };
    window.addEventListener("scroll", animatePosition);
    Panzoom2.once("endAnimation", () => {
      window.removeEventListener("scroll", animatePosition);
      fancybox.destroy();
    });
    animatePosition();
  }
  handleCursor(slide) {
    if (slide.type !== "image" || !slide.$el) {
      return;
    }
    const panzoom = slide.Panzoom;
    const clickAction = this.fancybox.option("Image.click", false, slide);
    const touchIsEnabled = this.fancybox.option("Image.touch");
    const classList = slide.$el.classList;
    const zoomInClass = this.fancybox.option("Image.canZoomInClass");
    const zoomOutClass = this.fancybox.option("Image.canZoomOutClass");
    classList.remove(zoomOutClass);
    classList.remove(zoomInClass);
    if (panzoom && clickAction === "toggleZoom") {
      const canZoomIn = panzoom && panzoom.content.scale === 1 && panzoom.option("maxScale") - panzoom.content.scale > 0.01;
      if (canZoomIn) {
        classList.add(zoomInClass);
      } else if (panzoom.content.scale > 1 && !touchIsEnabled) {
        classList.add(zoomOutClass);
      }
    } else if (clickAction === "close") {
      classList.add(zoomOutClass);
    }
  }
  onWheel(slide, event) {
    if (this.fancybox.state !== "ready") {
      return;
    }
    if (this.fancybox.trigger("Image.wheel", event) === false) {
      return;
    }
    switch (this.fancybox.option("Image.wheel")) {
      case "zoom":
        if (slide.state === "done") {
          slide.Panzoom && slide.Panzoom.zoomWithWheel(event);
        }
        break;
      case "close":
        this.fancybox.close();
        break;
      case "slide":
        this.fancybox[event.deltaY < 0 ? "prev" : "next"]();
        break;
    }
  }
  onClick(slide, event) {
    if (this.fancybox.state !== "ready") {
      return;
    }
    const panzoom = slide.Panzoom;
    if (panzoom && (panzoom.dragPosition.midPoint || panzoom.dragOffset.x !== 0 || panzoom.dragOffset.y !== 0 || panzoom.dragOffset.scale !== 1)) {
      return;
    }
    if (this.fancybox.Carousel.Panzoom.lockAxis) {
      return false;
    }
    const process = (action) => {
      switch (action) {
        case "toggleZoom":
          event.stopPropagation();
          slide.Panzoom && slide.Panzoom.zoomWithClick(event);
          break;
        case "close":
          this.fancybox.close();
          break;
        case "next":
          event.stopPropagation();
          this.fancybox.next();
          break;
      }
    };
    const clickAction = this.fancybox.option("Image.click");
    const dblclickAction = this.fancybox.option("Image.doubleClick");
    if (dblclickAction) {
      if (this.clickTimer) {
        clearTimeout(this.clickTimer);
        this.clickTimer = null;
        process(dblclickAction);
      } else {
        this.clickTimer = setTimeout(() => {
          this.clickTimer = null;
          process(clickAction);
        }, 300);
      }
    } else {
      process(clickAction);
    }
  }
  onPageChange(fancybox, carousel) {
    const currSlide = fancybox.getSlide();
    carousel.slides.forEach((slide) => {
      if (!slide.Panzoom || slide.state !== "done") {
        return;
      }
      if (slide.index !== currSlide.index) {
        slide.Panzoom.panTo({
          x: 0,
          y: 0,
          scale: 1,
          friction: 0.8
        });
      }
    });
  }
  attach() {
    this.fancybox.on(this.events);
  }
  detach() {
    this.fancybox.off(this.events);
  }
};
Image.defaults = defaults3;

// node_modules/@fancyapps/ui/src/Fancybox/plugins/Hash/Hash.js
var Hash = class {
  constructor(fancybox) {
    this.fancybox = fancybox;
    for (const methodName of ["onChange", "onClosing"]) {
      this[methodName] = this[methodName].bind(this);
    }
    this.events = {
      initCarousel: this.onChange,
      "Carousel.change": this.onChange,
      closing: this.onClosing
    };
    this.hasCreatedHistory = false;
    this.origHash = "";
    this.timer = null;
  }
  onChange(fancybox) {
    const carousel = fancybox.Carousel;
    if (this.timer) {
      clearTimeout(this.timer);
    }
    const firstRun = carousel.prevPage === null;
    const currentSlide = fancybox.getSlide();
    const currentHash = new URL(document.URL).hash;
    let newHash = false;
    if (currentSlide.slug) {
      newHash = "#" + currentSlide.slug;
    } else {
      const dataset = currentSlide.$trigger && currentSlide.$trigger.dataset;
      const slug = fancybox.option("slug") || dataset && dataset.fancybox;
      if (slug && slug.length && slug !== "true") {
        newHash = "#" + slug + (carousel.slides.length > 1 ? "-" + (currentSlide.index + 1) : "");
      }
    }
    if (firstRun) {
      this.origHash = currentHash !== newHash ? currentHash : "";
    }
    if (newHash && currentHash !== newHash) {
      this.timer = setTimeout(() => {
        try {
          window.history[firstRun ? "pushState" : "replaceState"](
            {},
            document.title,
            window.location.pathname + window.location.search + newHash
          );
          if (firstRun) {
            this.hasCreatedHistory = true;
          }
        } catch (e) {
        }
      }, 300);
    }
  }
  onClosing() {
    if (this.timer) {
      clearTimeout(this.timer);
    }
    if (this.hasSilentClose === true) {
      return;
    }
    try {
      window.history.replaceState(
        {},
        document.title,
        window.location.pathname + window.location.search + (this.origHash || "")
      );
      return;
    } catch (e) {
    }
  }
  attach(fancybox) {
    fancybox.on(this.events);
  }
  detach(fancybox) {
    fancybox.off(this.events);
  }
  static startFromUrl() {
    const Fancybox2 = Hash.Fancybox;
    if (!Fancybox2 || Fancybox2.getInstance() || Fancybox2.defaults.Hash === false) {
      return;
    }
    const { hash, slug, index } = Hash.getParsedURL();
    if (!slug) {
      return;
    }
    let selectedElem = document.querySelector(`[data-slug="${hash}"]`);
    if (selectedElem) {
      selectedElem.dispatchEvent(new CustomEvent("click", { bubbles: true, cancelable: true }));
    }
    if (Fancybox2.getInstance()) {
      return;
    }
    const groupElems = document.querySelectorAll(`[data-fancybox="${slug}"]`);
    if (!groupElems.length) {
      return;
    }
    if (index === null && groupElems.length === 1) {
      selectedElem = groupElems[0];
    } else if (index) {
      selectedElem = groupElems[index - 1];
    }
    if (selectedElem) {
      selectedElem.dispatchEvent(new CustomEvent("click", { bubbles: true, cancelable: true }));
    }
  }
  static onHashChange() {
    const { slug, index } = Hash.getParsedURL();
    const Fancybox2 = Hash.Fancybox;
    const instance = Fancybox2 && Fancybox2.getInstance();
    if (instance && instance.plugins.Hash) {
      if (slug) {
        const carousel = instance.Carousel;
        if (slug === instance.option("slug")) {
          return carousel.slideTo(index - 1);
        }
        for (let slide2 of carousel.slides) {
          if (slide2.slug && slide2.slug === slug) {
            return carousel.slideTo(slide2.index);
          }
        }
        const slide = instance.getSlide();
        const dataset = slide.$trigger && slide.$trigger.dataset;
        if (dataset && dataset.fancybox === slug) {
          return carousel.slideTo(index - 1);
        }
      }
      instance.plugins.Hash.hasSilentClose = true;
      instance.close();
    }
    Hash.startFromUrl();
  }
  static create(Fancybox2) {
    Hash.Fancybox = Fancybox2;
    function proceed() {
      window.addEventListener("hashchange", Hash.onHashChange, false);
      Hash.startFromUrl();
    }
    if (canUseDOM) {
      window.requestAnimationFrame(() => {
        if (/complete|interactive|loaded/.test(document.readyState)) {
          proceed();
        } else {
          document.addEventListener("DOMContentLoaded", proceed);
        }
      });
    }
  }
  static destroy() {
    window.removeEventListener("hashchange", Hash.onHashChange, false);
  }
  static getParsedURL() {
    const hash = window.location.hash.substr(1), tmp = hash.split("-"), index = tmp.length > 1 && /^\+?\d+$/.test(tmp[tmp.length - 1]) ? parseInt(tmp.pop(-1), 10) || null : null, slug = tmp.join("-");
    return {
      hash,
      slug,
      index
    };
  }
};

// node_modules/@fancyapps/ui/src/shared/utils/Fullscreen.js
var Fullscreen = {
  pageXOffset: 0,
  pageYOffset: 0,
  element() {
    return document.fullscreenElement || document.mozFullScreenElement || document.webkitFullscreenElement;
  },
  activate(element) {
    Fullscreen.pageXOffset = window.pageXOffset;
    Fullscreen.pageYOffset = window.pageYOffset;
    if (element.requestFullscreen) {
      element.requestFullscreen();
    } else if (element.mozRequestFullScreen) {
      element.mozRequestFullScreen();
    } else if (element.webkitRequestFullscreen) {
      element.webkitRequestFullscreen();
    } else if (element.msRequestFullscreen) {
      element.msRequestFullscreen();
    }
  },
  deactivate() {
    if (document.exitFullscreen) {
      document.exitFullscreen();
    } else if (document.mozCancelFullScreen) {
      document.mozCancelFullScreen();
    } else if (document.webkitExitFullscreen) {
      document.webkitExitFullscreen();
    }
  }
};

// node_modules/@fancyapps/ui/src/shared/utils/Slideshow.js
var Slideshow = class {
  constructor(fancybox) {
    this.fancybox = fancybox;
    this.active = false;
    this.handleVisibilityChange = this.handleVisibilityChange.bind(this);
  }
  isActive() {
    return this.active;
  }
  setTimer() {
    if (!this.active || this.timer) {
      return;
    }
    const delay = this.fancybox.option("slideshow.delay", 3e3);
    this.timer = setTimeout(() => {
      this.timer = null;
      if (!this.fancybox.option("infinite") && this.fancybox.getSlide().index === this.fancybox.Carousel.slides.length - 1) {
        this.fancybox.jumpTo(0, { friction: 0 });
      } else {
        this.fancybox.next();
      }
    }, delay);
    let $progress = this.$progress;
    if (!$progress) {
      $progress = document.createElement("div");
      $progress.classList.add("fancybox__progress");
      this.fancybox.$carousel.parentNode.insertBefore($progress, this.fancybox.$carousel);
      this.$progress = $progress;
      $progress.offsetHeight;
    }
    $progress.style.transitionDuration = `${delay}ms`;
    $progress.style.transform = "scaleX(1)";
  }
  clearTimer() {
    clearTimeout(this.timer);
    this.timer = null;
    if (this.$progress) {
      this.$progress.style.transitionDuration = "";
      this.$progress.style.transform = "";
      this.$progress.offsetHeight;
    }
  }
  activate() {
    if (this.active) {
      return;
    }
    this.active = true;
    this.fancybox.$container.classList.add("has-slideshow");
    if (this.fancybox.getSlide().state === "done") {
      this.setTimer();
    }
    document.addEventListener("visibilitychange", this.handleVisibilityChange, false);
  }
  handleVisibilityChange() {
    this.deactivate();
  }
  deactivate() {
    this.active = false;
    this.clearTimer();
    this.fancybox.$container.classList.remove("has-slideshow");
    document.removeEventListener("visibilitychange", this.handleVisibilityChange, false);
  }
  toggle() {
    if (this.active) {
      this.deactivate();
    } else if (this.fancybox.Carousel.slides.length > 1) {
      this.activate();
    }
  }
};

// node_modules/@fancyapps/ui/src/Fancybox/plugins/Toolbar/Toolbar.js
var defaults4 = {
  display: [
    "counter",
    "zoom",
    "slideshow",
    "fullscreen",
    "thumbs",
    "close"
  ],
  autoEnable: true,
  items: {
    counter: {
      position: "left",
      type: "div",
      class: "fancybox__counter",
      html: '<span data-fancybox-index=""></span>&nbsp;/&nbsp;<span data-fancybox-count=""></span>',
      attr: { tabindex: -1 }
    },
    prev: {
      type: "button",
      class: "fancybox__button--prev",
      label: "PREV",
      html: '<svg viewBox="0 0 24 24"><path d="M15 4l-8 8 8 8"/></svg>',
      attr: { "data-fancybox-prev": "" }
    },
    next: {
      type: "button",
      class: "fancybox__button--next",
      label: "NEXT",
      html: '<svg viewBox="0 0 24 24"><path d="M8 4l8 8-8 8"/></svg>',
      attr: { "data-fancybox-next": "" }
    },
    fullscreen: {
      type: "button",
      class: "fancybox__button--fullscreen",
      label: "TOGGLE_FULLSCREEN",
      html: `<svg viewBox="0 0 24 24">
                <g><path d="M3 8 V3h5"></path><path d="M21 8V3h-5"></path><path d="M8 21H3v-5"></path><path d="M16 21h5v-5"></path></g>
                <g><path d="M7 2v5H2M17 2v5h5M2 17h5v5M22 17h-5v5"/></g>
            </svg>`,
      click: function(event) {
        event.preventDefault();
        if (Fullscreen.element()) {
          Fullscreen.deactivate();
        } else {
          Fullscreen.activate(this.fancybox.$container);
        }
      }
    },
    slideshow: {
      type: "button",
      class: "fancybox__button--slideshow",
      label: "TOGGLE_SLIDESHOW",
      html: `<svg viewBox="0 0 24 24">
                <g><path d="M6 4v16"/><path d="M20 12L6 20"/><path d="M20 12L6 4"/></g>
                <g><path d="M7 4v15M17 4v15"/></g>
            </svg>`,
      click: function(event) {
        event.preventDefault();
        this.Slideshow.toggle();
      }
    },
    zoom: {
      type: "button",
      class: "fancybox__button--zoom",
      label: "TOGGLE_ZOOM",
      html: '<svg viewBox="0 0 24 24"><circle cx="10" cy="10" r="7"></circle><path d="M16 16 L21 21"></svg>',
      click: function(event) {
        event.preventDefault();
        const panzoom = this.fancybox.getSlide().Panzoom;
        if (panzoom) {
          panzoom.toggleZoom();
        }
      }
    },
    download: {
      type: "link",
      label: "DOWNLOAD",
      class: "fancybox__button--download",
      html: '<svg viewBox="0 0 24 24"><path d="M12 15V3m0 12l-4-4m4 4l4-4M2 17l.62 2.48A2 2 0 004.56 21h14.88a2 2 0 001.94-1.51L22 17"/></svg>',
      click: function(event) {
        event.stopPropagation();
      }
    },
    thumbs: {
      type: "button",
      label: "TOGGLE_THUMBS",
      class: "fancybox__button--thumbs",
      html: '<svg viewBox="0 0 24 24"><circle cx="4" cy="4" r="1" /><circle cx="12" cy="4" r="1" transform="rotate(90 12 4)"/><circle cx="20" cy="4" r="1" transform="rotate(90 20 4)"/><circle cx="4" cy="12" r="1" transform="rotate(90 4 12)"/><circle cx="12" cy="12" r="1" transform="rotate(90 12 12)"/><circle cx="20" cy="12" r="1" transform="rotate(90 20 12)"/><circle cx="4" cy="20" r="1" transform="rotate(90 4 20)"/><circle cx="12" cy="20" r="1" transform="rotate(90 12 20)"/><circle cx="20" cy="20" r="1" transform="rotate(90 20 20)"/></svg>',
      click: function(event) {
        event.stopPropagation();
        const thumbs = this.fancybox.plugins.Thumbs;
        if (thumbs) {
          thumbs.toggle();
        }
      }
    },
    close: {
      type: "button",
      label: "CLOSE",
      class: "fancybox__button--close",
      html: '<svg viewBox="0 0 24 24"><path d="M20 20L4 4m16 0L4 20"></path></svg>',
      attr: { "data-fancybox-close": "", tabindex: 0 }
    }
  }
};
var Toolbar = class {
  constructor(fancybox) {
    this.fancybox = fancybox;
    this.$container = null;
    this.state = "init";
    for (const methodName of [
      "onInit",
      "onPrepare",
      "onDone",
      "onKeydown",
      "onClosing",
      "onChange",
      "onSettle",
      "onRefresh"
    ]) {
      this[methodName] = this[methodName].bind(this);
    }
    this.events = {
      init: this.onInit,
      prepare: this.onPrepare,
      done: this.onDone,
      keydown: this.onKeydown,
      closing: this.onClosing,
      "Carousel.change": this.onChange,
      "Carousel.settle": this.onSettle,
      "Carousel.Panzoom.touchStart": () => this.onRefresh(),
      "Image.startAnimation": (fancybox2, slide) => this.onRefresh(slide),
      "Image.afterUpdate": (fancybox2, slide) => this.onRefresh(slide)
    };
  }
  onInit() {
    if (this.fancybox.option("Toolbar.autoEnable")) {
      let hasImage = false;
      for (const item of this.fancybox.items) {
        if (item.type === "image") {
          hasImage = true;
          break;
        }
      }
      if (!hasImage) {
        this.state = "disabled";
        return;
      }
    }
    for (const key of this.fancybox.option("Toolbar.display")) {
      const id = isPlainObject(key) ? key.id : key;
      if (id === "close") {
        this.fancybox.options.closeButton = false;
        break;
      }
    }
  }
  onPrepare() {
    const fancybox = this.fancybox;
    if (this.state !== "init") {
      return;
    }
    this.build();
    this.update();
    this.Slideshow = new Slideshow(fancybox);
    if (!fancybox.Carousel.prevPage) {
      if (fancybox.option("slideshow.autoStart")) {
        this.Slideshow.activate();
      }
      if (fancybox.option("fullscreen.autoStart") && !Fullscreen.element()) {
        try {
          Fullscreen.activate(fancybox.$container);
        } catch (error) {
        }
      }
    }
  }
  onFsChange() {
    window.scrollTo(Fullscreen.pageXOffset, Fullscreen.pageYOffset);
  }
  onSettle() {
    const fancybox = this.fancybox;
    const slideshow = this.Slideshow;
    if (slideshow && slideshow.isActive()) {
      if (fancybox.getSlide().index === fancybox.Carousel.slides.length - 1 && !fancybox.option("infinite")) {
        slideshow.deactivate();
      } else if (fancybox.getSlide().state === "done") {
        slideshow.setTimer();
      }
    }
  }
  onChange() {
    this.update();
    if (this.Slideshow && this.Slideshow.isActive()) {
      this.Slideshow.clearTimer();
    }
  }
  onDone(fancybox, slide) {
    const slideshow = this.Slideshow;
    if (slide.index === fancybox.getSlide().index) {
      this.update();
      if (slideshow && slideshow.isActive()) {
        if (!fancybox.option("infinite") && slide.index === fancybox.Carousel.slides.length - 1) {
          slideshow.deactivate();
        } else {
          slideshow.setTimer();
        }
      }
    }
  }
  onRefresh(slide) {
    if (!slide || slide.index === this.fancybox.getSlide().index) {
      this.update();
      if (this.Slideshow && this.Slideshow.isActive() && (!slide || slide.state === "done")) {
        this.Slideshow.deactivate();
      }
    }
  }
  onKeydown(fancybox, key, event) {
    if (key === " " && this.Slideshow) {
      this.Slideshow.toggle();
      event.preventDefault();
    }
  }
  onClosing() {
    if (this.Slideshow) {
      this.Slideshow.deactivate();
    }
    document.removeEventListener("fullscreenchange", this.onFsChange);
  }
  createElement(obj) {
    let $el;
    if (obj.type === "div") {
      $el = document.createElement("div");
    } else {
      $el = document.createElement(obj.type === "link" ? "a" : "button");
      $el.classList.add("carousel__button");
    }
    $el.innerHTML = obj.html;
    $el.setAttribute("tabindex", obj.tabindex || 0);
    if (obj.class) {
      $el.classList.add(...obj.class.split(" "));
    }
    for (const prop in obj.attr) {
      $el.setAttribute(prop, obj.attr[prop]);
    }
    if (obj.label) {
      $el.setAttribute("title", this.fancybox.localize(`{{${obj.label}}}`));
    }
    if (obj.click) {
      $el.addEventListener("click", obj.click.bind(this));
    }
    if (obj.id === "prev") {
      $el.setAttribute("data-fancybox-prev", "");
    }
    if (obj.id === "next") {
      $el.setAttribute("data-fancybox-next", "");
    }
    const $svg = $el.querySelector("svg");
    if ($svg) {
      $svg.setAttribute("role", "img");
      $svg.setAttribute("tabindex", "-1");
      $svg.setAttribute("xmlns", "http://www.w3.org/2000/svg");
    }
    return $el;
  }
  build() {
    this.cleanup();
    const all_items = this.fancybox.option("Toolbar.items");
    const all_groups = [
      {
        position: "left",
        items: []
      },
      {
        position: "center",
        items: []
      },
      {
        position: "right",
        items: []
      }
    ];
    const thumbs = this.fancybox.plugins.Thumbs;
    for (const key of this.fancybox.option("Toolbar.display")) {
      let id, item;
      if (isPlainObject(key)) {
        id = key.id;
        item = extend({}, all_items[id], key);
      } else {
        id = key;
        item = all_items[id];
      }
      if (["counter", "next", "prev", "slideshow"].includes(id) && this.fancybox.items.length < 2) {
        continue;
      }
      if (id === "fullscreen") {
        if (!document.fullscreenEnabled || window.fullScreen) {
          continue;
        }
        document.addEventListener("fullscreenchange", this.onFsChange);
      }
      if (id === "thumbs" && (!thumbs || thumbs.state === "disabled")) {
        continue;
      }
      if (!item) {
        continue;
      }
      let position = item.position || "right";
      let group = all_groups.find((obj) => obj.position === position);
      if (group) {
        group.items.push(item);
      }
    }
    const $container = document.createElement("div");
    $container.classList.add("fancybox__toolbar");
    for (const group of all_groups) {
      if (group.items.length) {
        const $wrap = document.createElement("div");
        $wrap.classList.add("fancybox__toolbar__items");
        $wrap.classList.add(`fancybox__toolbar__items--${group.position}`);
        for (const obj of group.items) {
          $wrap.appendChild(this.createElement(obj));
        }
        $container.appendChild($wrap);
      }
    }
    this.fancybox.$carousel.parentNode.insertBefore($container, this.fancybox.$carousel);
    this.$container = $container;
  }
  update() {
    const slide = this.fancybox.getSlide();
    const idx = slide.index;
    const cnt = this.fancybox.items.length;
    const src = slide.downloadSrc || (slide.type === "image" && !slide.error ? slide.src : null);
    for (const $el of this.fancybox.$container.querySelectorAll("a.fancybox__button--download")) {
      if (src) {
        $el.removeAttribute("disabled");
        $el.removeAttribute("tabindex");
        $el.setAttribute("href", src);
        $el.setAttribute("download", src);
        $el.setAttribute("target", "_blank");
      } else {
        $el.setAttribute("disabled", "");
        $el.setAttribute("tabindex", -1);
        $el.removeAttribute("href");
        $el.removeAttribute("download");
      }
    }
    const panzoom = slide.Panzoom;
    const canZoom = panzoom && panzoom.option("maxScale") > panzoom.option("baseScale");
    for (const $el of this.fancybox.$container.querySelectorAll(".fancybox__button--zoom")) {
      if (canZoom) {
        $el.removeAttribute("disabled");
      } else {
        $el.setAttribute("disabled", "");
      }
    }
    for (const $el of this.fancybox.$container.querySelectorAll("[data-fancybox-index]")) {
      $el.innerHTML = slide.index + 1;
    }
    for (const $el of this.fancybox.$container.querySelectorAll("[data-fancybox-count]")) {
      $el.innerHTML = cnt;
    }
    if (!this.fancybox.option("infinite")) {
      for (const $el of this.fancybox.$container.querySelectorAll("[data-fancybox-prev]")) {
        if (idx === 0) {
          $el.setAttribute("disabled", "");
        } else {
          $el.removeAttribute("disabled");
        }
      }
      for (const $el of this.fancybox.$container.querySelectorAll("[data-fancybox-next]")) {
        if (idx === cnt - 1) {
          $el.setAttribute("disabled", "");
        } else {
          $el.removeAttribute("disabled");
        }
      }
    }
  }
  cleanup() {
    if (this.Slideshow && this.Slideshow.isActive()) {
      this.Slideshow.clearTimer();
    }
    if (this.$container) {
      this.$container.remove();
    }
    this.$container = null;
  }
  attach() {
    this.fancybox.on(this.events);
  }
  detach() {
    this.fancybox.off(this.events);
    this.cleanup();
  }
};
Toolbar.defaults = defaults4;

// node_modules/@fancyapps/ui/src/Fancybox/plugins/index.js
var Plugins = {
  ScrollLock,
  Thumbs,
  Html,
  Toolbar,
  Image,
  Hash
};

// node_modules/@fancyapps/ui/src/Fancybox/l10n/en.js
var en_default = {
  CLOSE: "Close",
  NEXT: "Next",
  PREV: "Previous",
  MODAL: "You can close this modal content with the ESC key",
  ERROR: "Something Went Wrong, Please Try Again Later",
  IMAGE_ERROR: "Image Not Found",
  ELEMENT_NOT_FOUND: "HTML Element Not Found",
  AJAX_NOT_FOUND: "Error Loading AJAX : Not Found",
  AJAX_FORBIDDEN: "Error Loading AJAX : Forbidden",
  IFRAME_ERROR: "Error Loading Page",
  TOGGLE_ZOOM: "Toggle zoom level",
  TOGGLE_THUMBS: "Toggle thumbnails",
  TOGGLE_SLIDESHOW: "Toggle slideshow",
  TOGGLE_FULLSCREEN: "Toggle full-screen mode",
  DOWNLOAD: "Download"
};

// node_modules/@fancyapps/ui/src/Fancybox/Fancybox.js
var defaults5 = {
  startIndex: 0,
  preload: 1,
  infinite: true,
  showClass: "fancybox-zoomInUp",
  hideClass: "fancybox-fadeOut",
  animated: true,
  hideScrollbar: true,
  parentEl: null,
  mainClass: null,
  autoFocus: true,
  trapFocus: true,
  placeFocusBack: true,
  click: "close",
  closeButton: "inside",
  dragToClose: true,
  keyboard: {
    Escape: "close",
    Delete: "close",
    Backspace: "close",
    PageUp: "next",
    PageDown: "prev",
    ArrowUp: "next",
    ArrowDown: "prev",
    ArrowRight: "next",
    ArrowLeft: "prev"
  },
  template: {
    closeButton: '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" tabindex="-1"><path d="M20 20L4 4m16 0L4 20"/></svg>',
    spinner: '<svg xmlns="http://www.w3.org/2000/svg" width="50" height="50" viewBox="25 25 50 50" tabindex="-1"><circle cx="50" cy="50" r="20"/></svg>',
    main: null
  },
  l10n: en_default
};
var instances = /* @__PURE__ */ new Map();
var called = 0;
var Fancybox = class extends Base {
  constructor(items, options = {}) {
    items = items.map((item) => {
      if (item.width)
        item._width = item.width;
      if (item.height)
        item._height = item.height;
      return item;
    });
    super(extend(true, {}, defaults5, options));
    this.bindHandlers();
    this.state = "init";
    this.setItems(items);
    this.attachPlugins(Fancybox.Plugins);
    this.trigger("init");
    if (this.option("hideScrollbar") === true) {
      this.hideScrollbar();
    }
    this.initLayout();
    this.initCarousel();
    this.attachEvents();
    instances.set(this.id, this);
    this.trigger("prepare");
    this.state = "ready";
    this.trigger("ready");
    this.$container.setAttribute("aria-hidden", "false");
    if (this.option("trapFocus")) {
      this.focus();
    }
  }
  option(name, ...rest) {
    const slide = this.getSlide();
    let value = slide ? slide[name] : void 0;
    if (value !== void 0) {
      if (typeof value === "function") {
        value = value.call(this, this, ...rest);
      }
      return value;
    }
    return super.option(name, ...rest);
  }
  bindHandlers() {
    for (const methodName of [
      "onMousedown",
      "onKeydown",
      "onClick",
      "onFocus",
      "onCreateSlide",
      "onSettle",
      "onTouchMove",
      "onTouchEnd",
      "onTransform"
    ]) {
      this[methodName] = this[methodName].bind(this);
    }
  }
  attachEvents() {
    document.addEventListener("mousedown", this.onMousedown);
    document.addEventListener("keydown", this.onKeydown, true);
    if (this.option("trapFocus")) {
      document.addEventListener("focus", this.onFocus, true);
    }
    this.$container.addEventListener("click", this.onClick);
  }
  detachEvents() {
    document.removeEventListener("mousedown", this.onMousedown);
    document.removeEventListener("keydown", this.onKeydown, true);
    document.removeEventListener("focus", this.onFocus, true);
    this.$container.removeEventListener("click", this.onClick);
  }
  initLayout() {
    this.$root = this.option("parentEl") || document.body;
    let mainTemplate = this.option("template.main");
    if (mainTemplate) {
      this.$root.insertAdjacentHTML("beforeend", this.localize(mainTemplate));
      this.$container = this.$root.querySelector(".fancybox__container");
    }
    if (!this.$container) {
      this.$container = document.createElement("div");
      this.$root.appendChild(this.$container);
    }
    this.$container.onscroll = () => {
      this.$container.scrollLeft = 0;
      return false;
    };
    Object.entries({
      class: "fancybox__container",
      role: "dialog",
      tabIndex: "-1",
      "aria-modal": "true",
      "aria-hidden": "true",
      "aria-label": this.localize("{{MODAL}}")
    }).forEach((args) => this.$container.setAttribute(...args));
    if (this.option("animated")) {
      this.$container.classList.add("is-animated");
    }
    this.$backdrop = this.$container.querySelector(".fancybox__backdrop");
    if (!this.$backdrop) {
      this.$backdrop = document.createElement("div");
      this.$backdrop.classList.add("fancybox__backdrop");
      this.$container.appendChild(this.$backdrop);
    }
    this.$carousel = this.$container.querySelector(".fancybox__carousel");
    if (!this.$carousel) {
      this.$carousel = document.createElement("div");
      this.$carousel.classList.add("fancybox__carousel");
      this.$container.appendChild(this.$carousel);
    }
    this.$container.Fancybox = this;
    this.id = this.$container.getAttribute("id");
    if (!this.id) {
      this.id = this.options.id || ++called;
      this.$container.setAttribute("id", "fancybox-" + this.id);
    }
    const mainClass = this.option("mainClass");
    if (mainClass) {
      this.$container.classList.add(...mainClass.split(" "));
    }
    document.documentElement.classList.add("with-fancybox");
    this.trigger("initLayout");
    return this;
  }
  setItems(items) {
    const slides = [];
    for (const slide of items) {
      const $trigger = slide.$trigger;
      if ($trigger) {
        const dataset = $trigger.dataset || {};
        slide.src = dataset.src || $trigger.getAttribute("href") || slide.src;
        slide.type = dataset.type || slide.type;
        if (!slide.src && $trigger instanceof HTMLImageElement) {
          slide.src = $trigger.currentSrc || slide.$trigger.src;
        }
      }
      let $thumb = slide.$thumb;
      if (!$thumb) {
        let origTarget = slide.$trigger && slide.$trigger.origTarget;
        if (origTarget) {
          if (origTarget instanceof HTMLImageElement) {
            $thumb = origTarget;
          } else {
            $thumb = origTarget.querySelector("img:not([aria-hidden])");
          }
        }
        if (!$thumb && slide.$trigger) {
          $thumb = slide.$trigger instanceof HTMLImageElement ? slide.$trigger : slide.$trigger.querySelector("img:not([aria-hidden])");
        }
      }
      slide.$thumb = $thumb || null;
      let thumb = slide.thumb;
      if (!thumb && $thumb) {
        thumb = $thumb.currentSrc || $thumb.src;
        if (!thumb && $thumb.dataset) {
          thumb = $thumb.dataset.lazySrc || $thumb.dataset.src;
        }
      }
      if (!thumb && slide.type === "image") {
        thumb = slide.src;
      }
      slide.thumb = thumb || null;
      slide.caption = slide.caption || "";
      slides.push(slide);
    }
    this.items = slides;
  }
  initCarousel() {
    this.Carousel = new Carousel(
      this.$carousel,
      extend(
        true,
        {},
        {
          prefix: "",
          classNames: {
            viewport: "fancybox__viewport",
            track: "fancybox__track",
            slide: "fancybox__slide"
          },
          textSelection: true,
          preload: this.option("preload"),
          friction: 0.88,
          slides: this.items,
          initialPage: this.options.startIndex,
          slidesPerPage: 1,
          infiniteX: this.option("infinite"),
          infiniteY: true,
          l10n: this.option("l10n"),
          Dots: false,
          Navigation: {
            classNames: {
              main: "fancybox__nav",
              button: "carousel__button",
              next: "is-next",
              prev: "is-prev"
            }
          },
          Panzoom: {
            textSelection: true,
            panOnlyZoomed: () => {
              return this.Carousel && this.Carousel.pages && this.Carousel.pages.length < 2 && !this.option("dragToClose");
            },
            lockAxis: () => {
              if (this.Carousel) {
                let rez = "x";
                if (this.option("dragToClose")) {
                  rez += "y";
                }
                return rez;
              }
            }
          },
          on: {
            "*": (name, ...details) => this.trigger(`Carousel.${name}`, ...details),
            init: (carousel) => this.Carousel = carousel,
            createSlide: this.onCreateSlide,
            settle: this.onSettle
          }
        },
        this.option("Carousel")
      )
    );
    if (this.option("dragToClose")) {
      this.Carousel.Panzoom.on({
        touchMove: this.onTouchMove,
        afterTransform: this.onTransform,
        touchEnd: this.onTouchEnd
      });
    }
    this.trigger("initCarousel");
    return this;
  }
  onCreateSlide(carousel, slide) {
    let caption = slide.caption || "";
    if (typeof this.options.caption === "function") {
      caption = this.options.caption.call(this, this, this.Carousel, slide);
    }
    if (typeof caption === "string" && caption.length) {
      const $caption = document.createElement("div");
      const id = `fancybox__caption_${this.id}_${slide.index}`;
      $caption.className = "fancybox__caption";
      $caption.innerHTML = caption;
      $caption.setAttribute("id", id);
      slide.$caption = slide.$el.appendChild($caption);
      slide.$el.classList.add("has-caption");
      slide.$el.setAttribute("aria-labelledby", id);
    }
  }
  onSettle() {
    if (this.option("autoFocus")) {
      this.focus();
    }
  }
  onFocus(event) {
    if (!this.isTopmost()) {
      return;
    }
    this.focus(event);
  }
  onClick(event) {
    if (event.defaultPrevented) {
      return;
    }
    let eventTarget = event.composedPath()[0];
    if (eventTarget.matches("[data-fancybox-close]")) {
      event.preventDefault();
      Fancybox.close(false, event);
      return;
    }
    if (eventTarget.matches("[data-fancybox-next]")) {
      event.preventDefault();
      Fancybox.next();
      return;
    }
    if (eventTarget.matches("[data-fancybox-prev]")) {
      event.preventDefault();
      Fancybox.prev();
      return;
    }
    const activeElement = document.activeElement;
    if (activeElement) {
      if (activeElement.closest("[contenteditable]")) {
        return;
      }
      if (!eventTarget.matches(FOCUSABLE_ELEMENTS)) {
        activeElement.blur();
      }
    }
    if (eventTarget.closest(".fancybox__content")) {
      return;
    }
    if (getSelection().toString().length) {
      return;
    }
    if (this.trigger("click", event) === false) {
      return;
    }
    const action = this.option("click");
    switch (action) {
      case "close":
        this.close();
        break;
      case "next":
        this.next();
        break;
    }
  }
  onTouchMove() {
    const panzoom = this.getSlide().Panzoom;
    return panzoom && panzoom.content.scale !== 1 ? false : true;
  }
  onTouchEnd(panzoom) {
    const distanceY = panzoom.dragOffset.y;
    if (Math.abs(distanceY) >= 150 || Math.abs(distanceY) >= 35 && panzoom.dragOffset.time < 350) {
      if (this.option("hideClass")) {
        this.getSlide().hideClass = `fancybox-throwOut${panzoom.content.y < 0 ? "Up" : "Down"}`;
      }
      this.close();
    } else if (panzoom.lockAxis === "y") {
      panzoom.panTo({ y: 0 });
    }
  }
  onTransform(panzoom) {
    const $backdrop = this.$backdrop;
    if ($backdrop) {
      const yPos = Math.abs(panzoom.content.y);
      const opacity = yPos < 1 ? "" : Math.max(0.33, Math.min(1, 1 - yPos / panzoom.content.fitHeight * 1.5));
      this.$container.style.setProperty("--fancybox-ts", opacity ? "0s" : "");
      this.$container.style.setProperty("--fancybox-opacity", opacity);
    }
  }
  onMousedown() {
    if (this.state === "ready") {
      document.body.classList.add("is-using-mouse");
    }
  }
  onKeydown(event) {
    if (!this.isTopmost()) {
      return;
    }
    document.body.classList.remove("is-using-mouse");
    const key = event.key;
    const keyboard = this.option("keyboard");
    if (!keyboard || event.ctrlKey || event.altKey || event.shiftKey) {
      return;
    }
    const target = event.composedPath()[0];
    const classList = document.activeElement && document.activeElement.classList;
    const isUIElement = classList && classList.contains("carousel__button");
    if (key !== "Escape" && !isUIElement) {
      let ignoreElements = event.target.isContentEditable || ["BUTTON", "TEXTAREA", "OPTION", "INPUT", "SELECT", "VIDEO"].indexOf(target.nodeName) !== -1;
      if (ignoreElements) {
        return;
      }
    }
    if (this.trigger("keydown", key, event) === false) {
      return;
    }
    const action = keyboard[key];
    if (typeof this[action] === "function") {
      this[action]();
    }
  }
  getSlide() {
    const carousel = this.Carousel;
    if (!carousel)
      return null;
    const page = carousel.page === null ? carousel.option("initialPage") : carousel.page;
    const pages = carousel.pages || [];
    if (pages.length && pages[page]) {
      return pages[page].slides[0];
    }
    return null;
  }
  focus(event) {
    if (Fancybox.ignoreFocusChange) {
      return;
    }
    if (["init", "closing", "customClosing", "destroy"].indexOf(this.state) > -1) {
      return;
    }
    const $container = this.$container;
    const currentSlide = this.getSlide();
    const $currentSlide = currentSlide.state === "done" ? currentSlide.$el : null;
    if ($currentSlide && $currentSlide.contains(document.activeElement)) {
      return;
    }
    if (event) {
      event.preventDefault();
    }
    Fancybox.ignoreFocusChange = true;
    const allFocusableElems = Array.from($container.querySelectorAll(FOCUSABLE_ELEMENTS));
    let enabledElems = [];
    let $firstEl;
    for (let node of allFocusableElems) {
      const isNodeVisible = node.offsetParent;
      const isNodeInsideCurrentSlide = $currentSlide && $currentSlide.contains(node);
      const isNodeOutsideCarousel = !this.Carousel.$viewport.contains(node);
      if (isNodeVisible && (isNodeInsideCurrentSlide || isNodeOutsideCarousel)) {
        enabledElems.push(node);
        if (node.dataset.origTabindex !== void 0) {
          node.tabIndex = node.dataset.origTabindex;
          node.removeAttribute("data-orig-tabindex");
        }
        if (node.hasAttribute("autoFocus") || !$firstEl && isNodeInsideCurrentSlide && !node.classList.contains("carousel__button")) {
          $firstEl = node;
        }
      } else {
        node.dataset.origTabindex = node.dataset.origTabindex === void 0 ? node.getAttribute("tabindex") : node.dataset.origTabindex;
        node.tabIndex = -1;
      }
    }
    if (!event) {
      if (this.option("autoFocus") && $firstEl) {
        setFocusOn($firstEl);
      } else if (enabledElems.indexOf(document.activeElement) < 0) {
        setFocusOn($container);
      }
    } else {
      if (enabledElems.indexOf(event.target) > -1) {
        this.lastFocus = event.target;
      } else {
        if (this.lastFocus === $container) {
          setFocusOn(enabledElems[enabledElems.length - 1]);
        } else {
          setFocusOn($container);
        }
      }
    }
    this.lastFocus = document.activeElement;
    Fancybox.ignoreFocusChange = false;
  }
  hideScrollbar() {
    if (!canUseDOM) {
      return;
    }
    const scrollbarWidth = window.innerWidth - document.documentElement.getBoundingClientRect().width;
    const id = "fancybox-style-noscroll";
    let $style = document.getElementById(id);
    if ($style) {
      return;
    }
    if (scrollbarWidth > 0) {
      $style = document.createElement("style");
      $style.id = id;
      $style.type = "text/css";
      $style.innerHTML = `.compensate-for-scrollbar {padding-right: ${scrollbarWidth}px;}`;
      document.getElementsByTagName("head")[0].appendChild($style);
      document.body.classList.add("compensate-for-scrollbar");
    }
  }
  revealScrollbar() {
    document.body.classList.remove("compensate-for-scrollbar");
    const el = document.getElementById("fancybox-style-noscroll");
    if (el) {
      el.remove();
    }
  }
  clearContent(slide) {
    this.Carousel.trigger("removeSlide", slide);
    if (slide.$content) {
      slide.$content.remove();
      slide.$content = null;
    }
    if (slide.$closeButton) {
      slide.$closeButton.remove();
      slide.$closeButton = null;
    }
    if (slide._className) {
      slide.$el.classList.remove(slide._className);
    }
  }
  setContent(slide, html, opts = {}) {
    let $content;
    const $el = slide.$el;
    if (html instanceof HTMLElement) {
      if (["img", "iframe", "video", "audio"].indexOf(html.nodeName.toLowerCase()) > -1) {
        $content = document.createElement("div");
        $content.appendChild(html);
      } else {
        $content = html;
      }
    } else {
      const $fragment = document.createRange().createContextualFragment(html);
      $content = document.createElement("div");
      $content.appendChild($fragment);
    }
    if (slide.filter && !slide.error) {
      $content = $content.querySelector(slide.filter);
    }
    if (!($content instanceof Element)) {
      this.setError(slide, "{{ELEMENT_NOT_FOUND}}");
      return;
    }
    slide._className = `has-${opts.suffix || slide.type || "unknown"}`;
    $el.classList.add(slide._className);
    $content.classList.add("fancybox__content");
    if ($content.style.display === "none" || getComputedStyle($content).getPropertyValue("display") === "none") {
      $content.style.display = slide.display || this.option("defaultDisplay") || "flex";
    }
    if (slide.id) {
      $content.setAttribute("id", slide.id);
    }
    slide.$content = $content;
    $el.prepend($content);
    this.manageCloseButton(slide);
    if (slide.state !== "loading") {
      this.revealContent(slide);
    }
    return $content;
  }
  manageCloseButton(slide) {
    const position = slide.closeButton === void 0 ? this.option("closeButton") : slide.closeButton;
    if (!position || position === "top" && this.$closeButton) {
      return;
    }
    const $btn = document.createElement("button");
    $btn.classList.add("carousel__button", "is-close");
    $btn.setAttribute("title", this.options.l10n.CLOSE);
    $btn.innerHTML = this.option("template.closeButton");
    $btn.addEventListener("click", (e) => this.close(e));
    if (position === "inside") {
      if (slide.$closeButton) {
        slide.$closeButton.remove();
      }
      slide.$closeButton = slide.$content.appendChild($btn);
    } else {
      this.$closeButton = this.$container.insertBefore($btn, this.$container.firstChild);
    }
  }
  revealContent(slide) {
    this.trigger("reveal", slide);
    slide.$content.style.visibility = "";
    let showClass = false;
    if (!(slide.error || slide.state === "loading" || this.Carousel.prevPage !== null || slide.index !== this.options.startIndex)) {
      showClass = slide.showClass === void 0 ? this.option("showClass") : slide.showClass;
    }
    if (!showClass) {
      this.done(slide);
      return;
    }
    slide.state = "animating";
    this.animateCSS(slide.$content, showClass, () => {
      this.done(slide);
    });
  }
  animateCSS($element, className, callback) {
    if ($element) {
      $element.dispatchEvent(new CustomEvent("animationend", { bubbles: true, cancelable: true }));
    }
    if (!$element || !className) {
      if (typeof callback === "function") {
        callback();
      }
      return;
    }
    const handleAnimationEnd = function(event) {
      if (event.currentTarget === this) {
        $element.removeEventListener("animationend", handleAnimationEnd);
        if (callback) {
          callback();
        }
        $element.classList.remove(className);
      }
    };
    $element.addEventListener("animationend", handleAnimationEnd);
    $element.classList.add(className);
  }
  done(slide) {
    slide.state = "done";
    this.trigger("done", slide);
    const currentSlide = this.getSlide();
    if (currentSlide && slide.index === currentSlide.index && this.option("autoFocus")) {
      this.focus();
    }
  }
  setError(slide, message) {
    slide.error = message;
    this.hideLoading(slide);
    this.clearContent(slide);
    const div = document.createElement("div");
    div.classList.add("fancybox-error");
    div.innerHTML = this.localize(message || "<p>{{ERROR}}</p>");
    this.setContent(slide, div, { suffix: "error" });
  }
  showLoading(slide) {
    slide.state = "loading";
    slide.$el.classList.add("is-loading");
    let $spinner = slide.$el.querySelector(".fancybox__spinner");
    if ($spinner) {
      return;
    }
    $spinner = document.createElement("div");
    $spinner.classList.add("fancybox__spinner");
    $spinner.innerHTML = this.option("template.spinner");
    $spinner.addEventListener("click", () => {
      if (!this.Carousel.Panzoom.velocity)
        this.close();
    });
    slide.$el.prepend($spinner);
  }
  hideLoading(slide) {
    const $spinner = slide.$el && slide.$el.querySelector(".fancybox__spinner");
    if ($spinner) {
      $spinner.remove();
      slide.$el.classList.remove("is-loading");
    }
    if (slide.state === "loading") {
      this.trigger("load", slide);
      slide.state = "ready";
    }
  }
  next() {
    const carousel = this.Carousel;
    if (carousel && carousel.pages.length > 1) {
      carousel.slideNext();
    }
  }
  prev() {
    const carousel = this.Carousel;
    if (carousel && carousel.pages.length > 1) {
      carousel.slidePrev();
    }
  }
  jumpTo(...args) {
    if (this.Carousel)
      this.Carousel.slideTo(...args);
  }
  isClosing() {
    return ["closing", "customClosing", "destroy"].includes(this.state);
  }
  isTopmost() {
    return Fancybox.getInstance().id == this.id;
  }
  close(event) {
    if (event)
      event.preventDefault();
    if (this.isClosing()) {
      return;
    }
    if (this.trigger("shouldClose", event) === false) {
      return;
    }
    this.state = "closing";
    this.Carousel.Panzoom.destroy();
    this.detachEvents();
    this.trigger("closing", event);
    if (this.state === "destroy") {
      return;
    }
    this.$container.setAttribute("aria-hidden", "true");
    this.$container.classList.add("is-closing");
    const currentSlide = this.getSlide();
    this.Carousel.slides.forEach((slide) => {
      if (slide.$content && slide.index !== currentSlide.index) {
        this.Carousel.trigger("removeSlide", slide);
      }
    });
    if (this.state === "closing") {
      const hideClass = currentSlide.hideClass === void 0 ? this.option("hideClass") : currentSlide.hideClass;
      this.animateCSS(
        currentSlide.$content,
        hideClass,
        () => {
          this.destroy();
        },
        true
      );
    }
  }
  destroy() {
    if (this.state === "destroy") {
      return;
    }
    this.state = "destroy";
    this.trigger("destroy");
    const $trigger = this.option("placeFocusBack") ? this.option("triggerTarget", this.getSlide().$trigger) : null;
    this.Carousel.destroy();
    this.detachPlugins();
    this.Carousel = null;
    this.options = {};
    this.events = {};
    this.$container.remove();
    this.$container = this.$backdrop = this.$carousel = null;
    if ($trigger) {
      setFocusOn($trigger);
    }
    instances.delete(this.id);
    const nextInstance = Fancybox.getInstance();
    if (nextInstance) {
      nextInstance.focus();
      return;
    }
    document.documentElement.classList.remove("with-fancybox");
    document.body.classList.remove("is-using-mouse");
    this.revealScrollbar();
  }
  static show(items, options = {}) {
    return new Fancybox(items, options);
  }
  static fromEvent(event, options = {}) {
    if (event.defaultPrevented) {
      return;
    }
    if (event.button && event.button !== 0) {
      return;
    }
    if (event.ctrlKey || event.metaKey || event.shiftKey) {
      return;
    }
    const origTarget = event.composedPath()[0];
    let eventTarget = origTarget;
    let triggerGroupName;
    if (eventTarget.matches("[data-fancybox-trigger]") || (eventTarget = eventTarget.closest("[data-fancybox-trigger]"))) {
      options.triggerTarget = eventTarget;
      triggerGroupName = eventTarget && eventTarget.dataset && eventTarget.dataset.fancyboxTrigger;
    }
    if (triggerGroupName) {
      const triggerItems = document.querySelectorAll(`[data-fancybox="${triggerGroupName}"]`);
      const triggerIndex = parseInt(eventTarget.dataset.fancyboxIndex, 10) || 0;
      eventTarget = triggerItems.length ? triggerItems[triggerIndex] : eventTarget;
    }
    let matchingOpener;
    let target;
    Array.from(Fancybox.openers.keys()).reverse().some((opener) => {
      target = eventTarget || origTarget;
      let found = false;
      try {
        if (target instanceof Element && (typeof opener === "string" || opener instanceof String)) {
          found = target.matches(opener) || (target = target.closest(opener));
        }
      } catch (error) {
      }
      if (found) {
        event.preventDefault();
        matchingOpener = opener;
        return true;
      }
      return false;
    });
    let rez = false;
    if (matchingOpener) {
      options.event = event;
      options.target = target;
      target.origTarget = origTarget;
      rez = Fancybox.fromOpener(matchingOpener, options);
      const nextInstance = Fancybox.getInstance();
      if (nextInstance && nextInstance.state === "ready" && event.detail) {
        document.body.classList.add("is-using-mouse");
      }
    }
    return rez;
  }
  static fromOpener(opener, options = {}) {
    const mapCallback = function(el) {
      const falseValues = ["false", "0", "no", "null", "undefined"];
      const trueValues = ["true", "1", "yes"];
      const dataset = Object.assign({}, el.dataset);
      const options2 = {};
      for (let [key, value] of Object.entries(dataset)) {
        if (key === "fancybox") {
          continue;
        }
        if (key === "width" || key === "height") {
          options2[`_${key}`] = value;
        } else if (typeof value === "string" || value instanceof String) {
          if (falseValues.indexOf(value) > -1) {
            options2[key] = false;
          } else if (trueValues.indexOf(options2[key]) > -1) {
            options2[key] = true;
          } else {
            try {
              options2[key] = JSON.parse(value);
            } catch (e) {
              options2[key] = value;
            }
          }
        } else {
          options2[key] = value;
        }
      }
      if (el instanceof Element) {
        options2.$trigger = el;
      }
      return options2;
    };
    let items = [], index = options.startIndex || 0, target = options.target || null;
    options = extend({}, options, Fancybox.openers.get(opener));
    const groupAll = options.groupAll === void 0 ? false : options.groupAll;
    const groupAttr = options.groupAttr === void 0 ? "data-fancybox" : options.groupAttr;
    const groupValue = groupAttr && target ? target.getAttribute(`${groupAttr}`) : "";
    if (!target || groupValue || groupAll) {
      const $root = options.root || (target ? target.getRootNode() : document.body);
      items = [].slice.call($root.querySelectorAll(opener));
    }
    if (target && !groupAll) {
      if (groupValue) {
        items = items.filter((el) => el.getAttribute(`${groupAttr}`) === groupValue);
      } else {
        items = [target];
      }
    }
    if (!items.length) {
      return false;
    }
    const currentInstance = Fancybox.getInstance();
    if (currentInstance && items.indexOf(currentInstance.options.$trigger) > -1) {
      return false;
    }
    index = target ? items.indexOf(target) : index;
    items = items.map(mapCallback);
    return new Fancybox(
      items,
      extend({}, options, {
        startIndex: index,
        $trigger: target
      })
    );
  }
  static bind(selector, options = {}) {
    function attachClickEvent() {
      document.body.addEventListener("click", Fancybox.fromEvent, false);
    }
    if (!canUseDOM) {
      return;
    }
    if (!Fancybox.openers.size) {
      if (/complete|interactive|loaded/.test(document.readyState)) {
        attachClickEvent();
      } else {
        document.addEventListener("DOMContentLoaded", attachClickEvent);
      }
    }
    Fancybox.openers.set(selector, options);
  }
  static unbind(selector) {
    Fancybox.openers.delete(selector);
    if (!Fancybox.openers.size) {
      Fancybox.destroy();
    }
  }
  static destroy() {
    let fb;
    while (fb = Fancybox.getInstance()) {
      fb.destroy();
    }
    Fancybox.openers = /* @__PURE__ */ new Map();
    document.body.removeEventListener("click", Fancybox.fromEvent, false);
  }
  static getInstance(id) {
    if (id) {
      return instances.get(id);
    }
    const instance = Array.from(instances.values()).reverse().find((instance2) => {
      if (!instance2.isClosing()) {
        return instance2;
      }
      return false;
    });
    return instance || null;
  }
  static close(all = true, args) {
    if (all) {
      for (const instance of instances.values()) {
        instance.close(args);
      }
    } else {
      const instance = Fancybox.getInstance();
      if (instance) {
        instance.close(args);
      }
    }
  }
  static next() {
    const instance = Fancybox.getInstance();
    if (instance) {
      instance.next();
    }
  }
  static prev() {
    const instance = Fancybox.getInstance();
    if (instance) {
      instance.prev();
    }
  }
};
Fancybox.version = "__VERSION__";
Fancybox.defaults = defaults5;
Fancybox.openers = /* @__PURE__ */ new Map();
Fancybox.Plugins = Plugins;
Fancybox.bind("[data-fancybox]");
for (const [key, Plugin] of Object.entries(Fancybox.Plugins || {})) {
  if (typeof Plugin.create === "function") {
    Plugin.create(Fancybox);
  }
}
export {
  Fancybox
};
//# sourceMappingURL=@fancyapps_ui_src_Fancybox_Fancybox.js.map
